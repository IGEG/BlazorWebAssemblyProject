@inject IDataSolvent DataSolvent
@inject IDataProduct DataProduct
@inject ICalculator calculator

<div class="card mx-auto m-10 text-center" style="max-width: 50rem; ">
    <div class="card-header">
           <h3 class="pt-3 text-center">КАЛЬКУЛЯТОР ОКУПАЕМОСТИ ДИСТИЛЛЯТОРА</h3>   
    </div>
 <div class="card-body ">
        <div class="form-group mt-2">
            <label class="align-content-center">Выбор модели дистиллятора</label>
            <select class="form-select" @bind="@Volume">
                @foreach (var item in Products)
                {
                    <option value="@item.Volume">@item.Name</option>
                }
            </select>
        </div>
        <div class="form-group mt-2">
            <label>Марка растворителя</label>
                <select class="form-select" @bind="@PriceSolvent" >
                    @foreach(var item in Solvents)
                    {
                    <option value="@item.Price">@item.Name</option>
                    }
                </select>
        </div>
        <div class="m-2">
            <label class="m-2">Режим работы</label>
            <select class="form-select m-2" @bind="@Hours">
                <option selected>Выбрать</option>
                <option value="8">Одна смена 8 часов</option>
                <option value="16">Две смены 16 часов</option>
                <option value="24">Непрерывная работа 24 часа</option> 
            </select>
         </div>     
 </div>
            <div class="card-footer mt-2">
                <div >
                <button class="btn btn-primary "  @onclick="HandleValidSubmit">Посчитать</button>
                </div>
                <h3 class="mt-2 "> Дней: @Sum</h3>
            </div>

</div>

@code {
    int Volume = 0;
    decimal PriceSolvent = 0;
    int Sum ;
    int Hours = 0;
    private List<Solvent> Solvents = new List<Solvent>();
    private List<Product> Products = new List<Product>();

    private async Task HandleValidSubmit()
    {
        Sum = await  calculator.Calculate(Volume,PriceSolvent, Hours);
    }
    protected override async Task OnInitializedAsync()
    {
        Solvents = await DataSolvent.GetAllSolvents();
        Products = await DataProduct.GetAllDistillars();
    }


}
