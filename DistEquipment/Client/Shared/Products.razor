@inject IDataProduct DataProduct
@implements IDisposable


@foreach (var item in DataProduct.Products)
{
<div class="card mb-3" style="max-width: 840px;">
  <div class="row g-0">
    <div class="col-md-4">
         <a href="/product/@item.Id">
   <img  class="product-img" src="@item.Images" alt="@item.Name">
         </a>
    </div>
    <div class="col-md-8">
      <div class="card-body">
                    <a href="/product/@item.Id" style="text-decoration: none">
        <h5 class="card-title">@item.Name</h5>
           </a>
       <p class="card-text">@item.SmallDescription</p>
       <p class="card-text"><small class="price">Цена: @GetPrice(item) Руб.</small></p>
      </div>
    </div>
  </div>
</div>

}
@code {
    protected override void OnInitialized()
    {
        DataProduct.OnChange += StateHasChanged;
    }
    public void Dispose()
    {
        DataProduct.OnChange -= StateHasChanged;
    }

    private string GetPrice(Product product)
    {
        var model = product.ProductModels;
        if (model.Count() == 0)
        {
            return String.Empty;
        }
        if (model.Count() == 1)
        {
            return $"{model[0].Price}";
        }
        else
        {
            decimal? minPrice = model.Min(p => p.Price);
            return $"{minPrice}";
        }

    }
}
